''' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
=     Cache service interface definition                                  =
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = '''

def writeLog(self, type, data, objectId=None, append=True):
	return self._execMethod(self.defaultBackend, 'writeLog', type, data, objectId, append)

def readLog(self, type, objectId=None, maxSize=0):
	return self._execMethod(self.defaultBackend, 'readLog', type, objectId, maxSize)

def createOpsiBase(self):
	return self._execMethod(self.defaultBackend, 'createOpsiBase')

def getGeneralConfig_hash(self, objectId=None):
	return self._execMethod(self.defaultBackend, 'getGeneralConfig_hash', objectId)

def getGeneralConfigValue(self, key, objectId=None):
	return self.getGeneralConfig_hash(objectId = objectId).get(key)

def setGeneralConfig(self, config, objectId=None):
	return self._execMethod(self.defaultBackend, 'setGeneralConfig', config, objectId)

def setGeneralConfigValue(self, key, value, objectId=None):
	config = self.getGeneralConfig_hash(objectId = objectId)
	config[key] = value
	return self.setGeneralConfig(config = config, objectId = objectId)

def deleteGeneralConfig(self, objectId):
	return self._execMethod(self.defaultBackend, 'deleteGeneralConfig', objectId)

def setNetworkConfig(self, config, objectId=None):
	return self._execMethod(self.defaultBackend, 'setNetworkConfig', config, objectId)

def setNetworkConfigValue(self, key, value, objectId=None):
	config = self.getNetworkConfig_hash(objectId = objectId)
	config[key] = value
	return self.setNetworkConfig(config = config, objectId = objectId)
	
def getNetworkConfig_hash(self, objectId=None):
	return self._execMethod(self.defaultBackend, 'getNetworkConfig_hash', objectId)

def getNetworkConfigValue(self, key, objectId=None):
	return self.getNetworkConfig_hash(objectId = objectId).get(key)

def deleteNetworkConfig(self, objectId):
	return self._execMethod(self.defaultBackend, 'deleteNetworkConfig', objectId)

def getGroupIds_list(self):
	return self._execMethod(self.defaultBackend, 'getGroupIds_list')

def getHostGroupTree_hash(self):
	return self._execMethod(self.defaultBackend, 'getHostGroupTree_hash')

def createGroup(self, groupId, members=[], description="", parentGroupId=""):
	return self._execMethod(self.defaultBackend, 'createGroup', groupId, members, description, parentGroupId)

def deleteGroup(self, groupId):
	return self._execMethod(self.defaultBackend, 'deleteGroup', groupId)

def getHostId(self, hostname=None):
	return self._execMethod(self.defaultBackend, 'getHostId', hostname)

def setPXEBootConfiguration(self, hostId, args={}):
	return self._execMethod(self.defaultBackend, 'setPXEBootConfiguration', hostId, args)

def unsetPXEBootConfiguration(self, hostId):
	return self._execMethod(self.defaultBackend, 'unsetPXEBootConfiguration', hostId)

def powerOnHost(self, hostId):
	return self._execMethod(self.defaultBackend, 'powerOnHost', hostId)

def getIpAddress(self, hostId):
	return self._execMethod(self.defaultBackend, 'getIpAddress', hostId)

def createServer(self, serverName, domain, description=None, notes=None):
	return self._execMethod(self.defaultBackend, 'createServer', serverName, domain, description, notes)

def createClient(self, clientName, domain=None, description=None, notes=None, ipAddress=None, hardwareAddress=None):
	return self._execMethod(self.defaultBackend, 'createClient', clientName, domain, description, notes, ipAddress, hardwareAddress)
	
def deleteServer(self, serverId):
	return self._execMethod(self.defaultBackend, 'deleteServer', serverId)

def deleteClient(self, clientId):
	return self._execMethod(self.defaultBackend, 'deleteClient', clientId)

def setHostLastSeen(self, hostId, timestamp):
	return self._execMethod(self.defaultBackend, 'setHostLastSeen', hostId, timestamp)

def setHostDescription(self, hostId, description):
	return self._execMethod(self.defaultBackend, 'setHostDescription', hostId, description)

def setHostNotes(self, hostId, notes):
	return self._execMethod(self.defaultBackend, 'setHostNotes', hostId, notes)

def getHardwareInformation_listOfHashes(self, hostId):
	return self._execMethod(self.defaultBackend, 'getHardwareInformation_listOfHashes', hostId)

def getSoftwareInformation_hash(self, hostId):
	return self._execMethod(self.defaultBackend, 'getSoftwareInformation_hash', hostId)

def getSoftwareInformation_listOfHashes(self):
	return self._execMethod(self.defaultBackend, 'getSoftwareInformation_listOfHashes')

def setSoftwareInformation(self, hostId, info):
	return self._execMethod(self.defaultBackend, 'setSoftwareInformation', hostId, info)

def deleteSoftwareInformation(self, hostId):
	return self._execMethod(self.defaultBackend, 'deleteSoftwareInformation', hostId)

def softwareInformationToProductInstallationStatus(self, hostIds=[]):
	return self._execMethod(self.defaultBackend, 'softwareInformationToProductInstallationStatus', hostIds)
	
def getHardwareInformation_hash(self, hostId):
	return self._execMethod(self.defaultBackend, 'getHardwareInformation_hash', hostId)

def setHardwareInformation(self, hostId, info):
	return self._execMethod(self.defaultBackend, 'setHardwareInformation', hostId, info)

def deleteHardwareInformation(self, hostId):
	return self._execMethod(self.defaultBackend, 'deleteHardwareInformation', hostId)

def filterHostsByHardwareInformation(self, hostIds, hwFilter):
	return self._execMethod(self.defaultBackend, 'filterHostsByHardwareInformation', hostIds, hwFilter)
	
def getHost_hash(self, hostId):
	return self._execMethod(self.defaultBackend, 'getHost_hash', hostId)

def getClients_listOfHashes(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	return self._execMethod(self.defaultBackend, 'getClients_listOfHashes', serverId, depotIds, groupId, productId, installationStatus, actionRequest, productVersion, packageVersion)
	
def getClientIds_list(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	return self._execMethod(self.defaultBackend, 'getClientIds_list', serverId, depotIds, groupId, productId, installationStatus, actionRequest, productVersion, packageVersion)

def getClientIdByMac(self, mac):
	return self._execMethod(self.defaultBackend, 'getClientIdByMac', mac)
	
def getServerIds_list(self):
	return self._execMethod(self.defaultBackend, 'getServerIds_list')

def getServerId(self, clientId):
	return self._execMethod(self.defaultBackend, 'getServerId', clientId)

def createDepot(self, depotName, domain, depotLocalUrl, depotRemoteUrl, repositoryLocalUrl, repositoryRemoteUrl, network, description=None, notes=None, maxBandwidth=0):
	return self._execMethod(self.defaultBackend, 'createDepot', depotName, domain, depotLocalUrl, depotRemoteUrl, repositoryLocalUrl, repositoryRemoteUrl, network, description, notes, maxBandwidth)
	
def getDepotIds_list(self):
	return self._execMethod(self.defaultBackend, 'getDepotIds_list')

def getDepot_hash(self, depotId):
	return self._execMethod(self.defaultBackend, 'getDepot_hash', depotId)

def getDepotId(self, clientId=None):
	return self._execMethod(self.defaultBackend, 'getDepotId', clientId)

def deleteDepot(self, depotId):
	return self._execMethod(self.defaultBackend, 'deleteDepot', depotId)
	
def generateOpsiHostKey(self):
	return generateOpsiHostKey()
	
def getOpsiHostKey(self, hostId=None):
	return self._execMethod(self.defaultBackend, 'getOpsiHostKey', hostId)

def setOpsiHostKey(self, hostId, opsiHostKey):
	return self._execMethod(self.defaultBackend, 'setOpsiHostKey', hostId, opsiHostKey)

def deleteOpsiHostKey(self, hostId):
	return self._execMethod(self.defaultBackend, 'deleteOpsiHostKey', hostId)

def getMacAddresses_list(self, hostId):
	return self._execMethod(self.defaultBackend, 'getMacAddresses_list', hostId)

def setMacAddresses(self, hostId, macs=()):
	return self._execMethod(self.defaultBackend, 'setMacAddresses', hostId, macs)

def getMacAddress(self, hostId):
	return self._execMethod(self.defaultBackend, 'getMacAddress', hostId)
	
def setMacAddress(self, hostId, mac):
	return self._execMethod(self.defaultBackend, 'setMacAddresses', hostId, [ mac ])

def getPcpatchPassword(self, hostId):
	return self._execMethod(self.defaultBackend, 'getPcpatchPassword', hostId)

def setPcpatchPassword(self, hostId, password):
	return self._execMethod(self.defaultBackend, 'setPcpatchPassword', hostId, password)

def lockProduct(self, productId, depotIds=[]):
	return self._execMethod(self.defaultBackend, 'lockProduct', productId, depotIds)

def unlockProduct(self, productId, depotIds=[]):
	return self._execMethod(self.defaultBackend, 'unlockProduct', productId, depotIds)

def getProductLocks_hash(self, depotIds=[]):
	return self._execMethod(self.defaultBackend, 'getProductLocks_hash', depotIds)

def createProduct(self, productType, productId, name, productVersion, packageVersion, licenseRequired=0,
		   setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="",
		   priority=0, description="", advice="", productClassNames=(), pxeConfigTemplate='',
		   windowsSoftwareIds=[], depotIds=[]):
	self._execMethod(self.defaultBackend, 'createProduct',
				productType, productId, name, productVersion, packageVersion, licenseRequired,
				setupScript, uninstallScript, updateScript, alwaysScript, onceScript,
				priority, description, advice, productClassNames, pxeConfigTemplate,
				windowsSoftwareIds, depotIds)

def createLocalBootProduct(self, productId, name, productVersion, packageVersion, licenseRequired=0,
		   setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="",
		   priority=10, description="", advice="", productClassNames=('localBoot'),
		   windowsSoftwareIds=[], depotIds=[]):
	self.createProduct('localboot', productId, name, productVersion, packageVersion, licenseRequired,
			    setupScript, uninstallScript, updateScript, alwaysScript, onceScript,
			    priority, description, advice, productClassNames, '',
			    windowsSoftwareIds, depotIds)

def createNetBootProduct(self, productId, name, productVersion, packageVersion, licenseRequired=0,
		   setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="",
		   priority=10, description="", advice="", productClassNames=('netboot'), pxeConfigTemplate='',
		   windowsSoftwareIds=[], depotIds=[]):
	self.createProduct('netboot', productId, name, productVersion, packageVersion, licenseRequired,
			    setupScript, uninstallScript, updateScript, alwaysScript, onceScript,
			    priority, description, advice, productClassNames, pxeConfigTemplate,
			    windowsSoftwareIds, depotIds)

def createServerProduct(self, productId, name, productVersion, packageVersion, licenseRequired=0,
		   setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="",
		   priority=10, description="", advice="", productClassNames=('server'),
		   windowsSoftwareIds=[], depotIds=[]):
	self.createProduct('server', productId, name, productVersion, packageVersion, licenseRequired,
			    setupScript, uninstallScript, updateScript, alwaysScript, onceScript,
			    priority, description, advice, productClassNames, '',
			    windowsSoftwareIds, depotIds)

def deleteProduct(self, productId, depotIds=[]):
	return self._execMethod(self.defaultBackend, 'deleteProduct', productId, depotIds)
	
def getProduct_hash(self, productId, depotId=None):
	return self._execMethod(self.defaultBackend, 'getProduct_hash', productId, depotId)

def getProducts_hash(self, depotIds=[]):
	return self._execMethod(self.defaultBackend, 'getProducts_hash', depotIds)

def getProducts_listOfHashes(self, depotId=None):
	return self._execMethod(self.defaultBackend, 'getProducts_listOfHashes', depotId)

def getProductIds_list(self, productType=None, objectId=None, installationStatus=None):
	return self._execMethod(self.defaultBackend, 'getProductIds_list', productType, objectId, installationStatus)

def getLocalBootProductIds_list(self, objectId=None, installationStatus=None):
	return self.getProductIds_list('localboot', objectId, installationStatus)

def getNetBootProductIds_list(self, objectId=None, installationStatus=None):
	return self.getProductIds_list('netboot', objectId, installationStatus)

def getServerProductIds_list(self, objectId=None, installationStatus=None):
	return self.getProductIds_list('server', objectId, installationStatus)

def getInstallableProductIds_list(self, clientId):
	return self.getProductIds_list( None, self.getDepotId(clientId) )

def getInstallableLocalBootProductIds_list(self, clientId):
	return self.getProductIds_list( 'localboot', self.getDepotId(clientId) )

def getInstallableNetBootProductIds_list(self, clientId):
	return self.getProductIds_list( 'netboot', self.getDepotId(clientId) )

def getInstalledProductIds_list(self, objectId):
	return self.getProductIds_list( None, objectId, 'installed' )

def getUninstalledProductIds_list(self, objectId):
	return self.getProductIds_list( None, objectId, 'uninstalled' )

def getInstalledLocalBootProductIds_list(self, objectId):
	return self.getProductIds_list( 'localboot', objectId, 'installed' )

def getInstalledNetBootProductIds_list(self, objectId):
	return self.getProductIds_list( 'netboot', objectId, 'installed' )

def getProvidedLocalBootProductIds_list(self, depotId):
	return self.getProductIds_list( 'localboot', depotId, 'installed' )

def getProvidedNetBootProductIds_list(self, depotId):
	return self.getProductIds_list( 'netboot', depotId, 'installed' )

def getProductInstallationStatus_hash(self, productId, objectId):
	return self._execMethod(self.defaultBackend, 'getProductInstallationStatus_hash', productId, objectId)

def getProductInstallationStatus_listOfHashes(self, objectId):
	return self._execMethod(self.defaultBackend, 'getProductInstallationStatus_listOfHashes', objectId)

def setProductState(self, productId, objectId, installationStatus="", actionRequest="", productVersion="", packageVersion="", lastStateChange="", productActionProgress={}):
	return self._execMethod(self.defaultBackend, 'setProductState', productId, objectId, installationStatus, actionRequest, productVersion, packageVersion, lastStateChange, productActionProgress)

def setProductInstallationStatus(self, productId, objectId, installationStatus):
	return self._execMethod(self.defaultBackend, 'setProductInstallationStatus', productId, objectId, installationStatus)

def setProductActionProgress(self, productId, hostId, productActionProgress):
	return self._execMethod(self.defaultBackend, 'setProductActionProgress', productId, hostId, productActionProgress)

def getPossibleProductActions_list(self, productId=None, depotId=None):
	return self._execMethod(self.defaultBackend, 'getPossibleProductActions_list', productId, depotId)

def getPossibleProductActions_hash(self, depotId=None):
	return self._execMethod(self.defaultBackend, 'getPossibleProductActions_hash', depotId)

def getProductActionRequests_listOfHashes(self, clientId, options={}):
	return self._execMethod(self.defaultBackend, 'getProductActionRequests_listOfHashes', clientId)

def getDefaultNetBootProductId(self, clientId):
	return self._execMethod(self.defaultBackend, 'getDefaultNetBootProductId', clientId)
	
def setProductActionRequest(self, productId, clientId, actionRequest):
	return self._execMethod(self.defaultBackend, 'setProductActionRequest', productId, clientId, actionRequest)

def unsetProductActionRequest(self, productId, clientId):
	return self._execMethod(self.defaultBackend, 'unsetProductActionRequest', productId, clientId)

def getLocalBootProductStates_hash(self, objectIds=[], options={}):
	return self._execMethod(self.defaultBackend, 'getLocalBootProductStates_hash', objectIds)

def getNetBootProductStates_hash(self, objectIds=[], options={}):
	return self._execMethod(self.defaultBackend, 'getNetBootProductStates_hash', objectIds)

def getProductStates_hash(self, objectIds=[], options={}):
	return self._execMethod(self.defaultBackend, 'getProductStates_hash', objectIds)

def getProductPropertyDefinitions_hash(self, depotId=None):
	return self._execMethod(self.defaultBackend, 'getProductPropertyDefinitions_hash', depotId)

def getProductPropertyDefinitions_listOfHashes(self, productId, depotId=None):
	return self._execMethod(self.defaultBackend, 'getProductPropertyDefinitions_listOfHashes', productId, depotId)

def deleteProductPropertyDefinition(self, productId, name, depotIds=[]):
	return self._execMethod(self.defaultBackend, 'deleteProductPropertyDefinition', productId, name, depotIds)

def deleteProductPropertyDefinitions(self, productId, depotIds=[]):
	return self._execMethod(self.defaultBackend, 'deleteProductPropertyDefinitions', productId, depotIds)

def createProductPropertyDefinition(self, productId, name, description=None, defaultValue=None, possibleValues=[], depotIds=[]):
	return self._execMethod(self.defaultBackend, 'createProductPropertyDefinition', productId, name, description, defaultValue, possibleValues, depotIds)

def getProductProperties_hash(self, productId, objectId=None):
	return self._execMethod(self.defaultBackend, 'getProductProperties_hash', productId, objectId)
	
def setProductProperties(self, productId, properties, objectId=None):
	return self._execMethod(self.defaultBackend, 'setProductProperties', productId, properties, objectId)

def setProductProperty(self, productId, property, value, objectId=None):
	properties = self.getProductProperties_hash(productId, objectId)
	properties[property] = value
	self.setProductProperties(productId, properties, objectId)
	
def deleteProductProperty(self, productId, property, objectId=None):
	return self._execMethod(self.defaultBackend, 'deleteProductProperty', depotId, productId, property, objectId)

def deleteProductProperties(self, productId, objectId=None):
	return self._execMethod(self.defaultBackend, 'deleteProductProperties', productId, objectId)

def getProductDependencies_listOfHashes(self, productId=None, depotId=None):
	return self._execMethod(self.defaultBackend, 'getProductDependencies_listOfHashes', productId, depotId)

def createProductDependency(self, productId, action, requiredProductId="", requiredProductClassId="", requiredAction="", requiredInstallationStatus="", requirementType="", depotIds=[]):
	return self._execMethod(self.defaultBackend, 'createProductDependency', productId, action, requiredProductId, requiredProductClassId, requiredAction, requiredInstallationStatus, requirementType, depotIds)

def deleteProductDependency(self, productId, action="", requiredProductId="", requiredProductClassId="", requirementType="", depotIds=[]):
	return self._execMethod(self.defaultBackend, 'deleteProductDependency', productId, action, requiredProductId, requiredProductClassId, requirementType, depotIds)

def createLicenseContract(self, licenseContractId="", partner="", conclusionDate="", notificationDate="", expirationDate="", notes=""):
	return self._execMethod(self.defaultBackend, 'createLicenseContract', licenseContractId, partner, conclusionDate, notificationDate, expirationDate, notes)

def getLicenseContractIds_list(self):
	return self._execMethod(self.defaultBackend, 'getLicenseContractIds_list')

def getLicenseContract_hash(self, licenseContractId):
	return self._execMethod(self.defaultBackend, 'getLicenseContract_hash', licenseContractId)

def getLicenseContracts_listOfHashes(self):
	return self._execMethod(self.defaultBackend, 'getLicenseContracts_listOfHashes')

def deleteLicenseContract(self, licenseContractId):
	return self._execMethod(self.defaultBackend, 'deleteLicenseContract', licenseContractId)

def createSoftwareLicense(self, softwareLicenseId="", licenseContractId="", licenseType="", maxInstallations="", boundToHost="", expirationDate=""):
	return self._execMethod(self.defaultBackend, 'createSoftwareLicense', softwareLicenseId, licenseContractId, licenseType, maxInstallations, boundToHost, expirationDate)

def getSoftwareLicenseIds_list(self):
	return self._execMethod(self.defaultBackend, 'getSoftwareLicenseIds_list')
	
def getSoftwareLicense_hash(self, softwareLicenseId):
	return self._execMethod(self.defaultBackend, 'getSoftwareLicense_hash', softwareLicenseId)

def getSoftwareLicenses_listOfHashes(self):
	return self._execMethod(self.defaultBackend, 'getSoftwareLicenses_listOfHashes')

def deleteSoftwareLicense(self, softwareLicenseId):
	return self._execMethod(self.defaultBackend, 'deleteSoftwareLicense', softwareLicenseId)

def createLicensePool(self, licensePoolId, description="", productIds=[], windowsSoftwareIds=[]):
	return self._execMethod(self.defaultBackend, 'createLicensePool', licensePoolId, description, productIds, windowsSoftwareIds)

def getLicensePoolIds_list(self):
	return self._execMethod(self.defaultBackend, 'getLicensePoolIds_list')

def getLicensePool_hash(self, licensePoolId):
	return self._execMethod(self.defaultBackend, 'getLicensePool_hash', licensePoolId)

def getLicensePools_listOfHashes(self):
	return self._execMethod(self.defaultBackend, 'getLicensePools_listOfHashes')

def deleteLicensePool(self, licensePoolId):
	return self._execMethod(self.defaultBackend, 'deleteLicensePool', licensePoolId)

def addSoftwareLicenseToLicensePool(self, softwareLicenseId, licensePoolId, licenseKey=""):
	return self._execMethod(self.defaultBackend, 'addSoftwareLicenseToLicensePool', softwareLicenseId, licensePoolId, licenseKey)

def setWindowsSoftwareIdsToLicensePool(self, windowsSoftwareIds, licensePoolId):
	return self._execMethod(self.defaultBackend, 'setWindowsSoftwareIdsToLicensePool', windowsSoftwareIds, licensePoolId)

def addProductIdsToLicensePool(self, productIds, licensePoolId):
	return self._execMethod(self.defaultBackend, 'addProductIdsToLicensePool', productIds, licensePoolId)

def getSoftwareLicenseKeys_listOfHashes(self):
	return self._execMethod(self.defaultBackend, 'getSoftwareLicenseKeys_listOfHashes')

def getAndAssignSoftwareLicenseKey(self, hostId, licensePoolId="", productId="", windowsSoftwareId=""):
	return self._execMethod(self.defaultBackend, 'getAndAssignSoftwareLicenseKey', hostId, licensePoolId, productId, windowsSoftwareId)
	
def getLicenseKey(self, productId, clientId):
	return self.getAndAssignSoftwareLicenseKey(hostId = clientId, productId = productId)

def assignSoftwareLicense(self, hostId, licenseKey="", licensePoolId="", productId="", windowsSoftwareId="", notes=""):
	return self._execMethod(self.defaultBackend, 'assignSoftwareLicense', hostId, licenseKey, licensePoolId, productId, windowsSoftwareId, notes)

def getAssignedSoftwareLicenseKey(self, hostId, licensePoolId="", productId="", windowsSoftwareId=""):
	return self._execMethod(self.defaultBackend, 'getAssignedSoftwareLicenseKey', hostId, licensePoolId, productId, windowsSoftwareId)

def getUsedLicenses_listOfHashes(self, hostIds=[], licensePoolId=""):
	return self._execMethod(self.defaultBackend, 'getUsedLicenses_listOfHashes', hostIds, licensePoolId)
	
def freeSoftwareLicense(self, hostId, licensePoolId="", productId="", windowsSoftwareId=""):
	return self._execMethod(self.defaultBackend, 'freeSoftwareLicense', hostId, licensePoolId, productId, windowsSoftwareId)

def freeAllSoftwareLicenses(self, hostIds=[]):
	return self._execMethod(self.defaultBackend, 'freeAllSoftwareLicenses', hostIds)
	
def getLicenseStatistics(self, licensePoolId):
	return self._execMethod(self.defaultBackend, 'getLicenseStatistics', licensePoolId)

def getOpsiHWAuditConf(self, lang=''):
	return self._execMethod(self.defaultBackend, 'getOpsiHWAuditConf', lang)

